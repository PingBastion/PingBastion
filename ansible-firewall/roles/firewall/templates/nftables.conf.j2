#!/usr/sbin/nft -f
flush ruleset

define LAN="{{ firewall_cfg.interfaces.lan.nic }}";
define WAN="{{ firewall_cfg.interfaces.wan.nic }}";

{% macro ports(p) -%}
  {%- if p is sequence and p is not string -%}
    {{ p | join(',') }}
  {%- else -%}
    {{ p }}
  {%- endif -%}
{%- endmacro %}

{% set fw_rules = firewall_cfg.rules | default([]) %}
{% set IFB_WAN  = firewall_cfg.cake.wan.ifb | default('ifb_' ~ firewall_cfg.interfaces.wan.nic) %}

# ===================== FILTER TABLE =====================

table inet filter {
  chain input {
    type filter hook input priority 0;
    policy {{ firewall_cfg.policy.input }};
    ct state established,related accept;
    iif lo accept;

    {% for r in fw_rules if r.get('chain') == 'input' %}
      {% if r.get('from') == 'lan' %}
    iifname $LAN accept comment "{{ r.get('comment', '') }}";
      {% elif r.get('proto') == 'icmp' %}
    ip protocol icmp accept comment "{{ r.get('comment', '') }}";
    ip6 nexthdr icmpv6 accept comment "{{ r.get('comment', '') }}";
      {% endif %}
    {% endfor %}
  }

  chain forward {
    type filter hook forward priority 0;
    policy {{ firewall_cfg.policy.forward }};
    ct state established,related accept;

    {% if firewall_cfg.nat %}
    iifname $LAN oifname $WAN accept;  # allow LANâ†’WAN for NAT
    {% endif %}

    {% for r in fw_rules if r.get('chain') == 'forward' %}
      {% if r.get('from') == 'lan' and r.get('to') == 'wan' %}
    iifname $LAN oifname $WAN accept comment "{{ r.get('comment', '') }}";
      {% endif %}
    {% endfor %}
  }

  chain output {
    type filter hook output priority 0;
    policy {{ firewall_cfg.policy.output }};
    ct state established,related accept;
  }
}

# ===================== NAT TABLE =====================
{% if firewall_cfg.nat %}
table ip nat {
  chain postrouting {
    type nat hook postrouting priority 100;
    oifname $WAN masquerade;
  }
}
{% endif %}
